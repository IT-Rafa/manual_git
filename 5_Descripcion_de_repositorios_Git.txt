DESCRIPCIÓN DE REPOSITORIOS GIT

En breve empezaremos a crear y manejar cada repositorio, pero antes vamos a hacer una descripción de los tipos de repositorios y donde están y como se organizan los archivos.


TIPOS DE REPOSITORIOS GIT

Existen dos tipos de repositorios:

	- Repositorios locales
		Son las carpetas entramos y modificamos nuestros archivos. Incluyen una carpeta .git que almacena el estado de los archivos, indicando si git los tiene controlados, si hay versiones anteriores,
		Estas carpetas son locales, y cada archivo se gestiona de forma local. Solo es válido en nuestro equipo

	- Repositorios remotos.
		Los repositorios remotos son rutas a repositorios que están en otro equipo. En este caso obviamente debemos tener comunicación con esos equipos.
		Normalmente, uno de los repositorios remotos, que sera usado como un repositorio central, será un repositorio bare.
		Los repositorios bare son creados solo para compartir versiones entre varios repositorios locales. No tienen opción para gestionar los archivos de forma interna, solo funcionan con las opciones de git.


AREAS EN UN REPOSITORIO LOCAL GIT

Los archivos en un repositorio están controlados dentro de la carpeta .git.
Cada archivo tiene un estado según si se ha 











	
		Si copiamos otro repositorio, que veremos en breve como se hace, tendremos un repositorio local con todos los datos en nuestro equipo.
		Los repositorios locales dividen los archivos en tres zonas: 
		
		Rastrear Archivos Nuevos
		Preparar Archivos Modificados
		Ignorar Archivos
		Confirmar tus Cambios
		Cambios Preparados y No Preparados
			- Working directory (o directorio de trabajo)
				Es una copia de una versión del proyecto
				El contenido se saca de la base de datos en la carpeta .git y se colocan en disco para que los puedas usar o modificar.
				Una vez que el archivo esté creado o modificado es almacenado en está zona.
				Seguirá en ella mientras no cambiemos de rama.
				Para que quede almacenado de forma fija le indicamos a git que lo consideramos válido para incluir en el siguiente paso de la versión que estemos manipulando.
				
				
			- Staging area (área de almacenamiento o preparación)
				es un archivo que almacena lo que irá en una confirmación (commit).
				Es también conocido como index.

			- git directory  (directorio de Git)
				Almacena los metadatos y la base de datos de objetos git.




			(o El directorio de Git (Git directory), el directorio de trabajo (working directory), y el área de almacenamiento (staging area).
			- Staging area
			- git directory
			- Área de Preparación
		
	- Repositorios remotos.
		Los repositorios remotos son rutas a repositorios que están en otro equipo. En este caso obviamente debemos tener comunicación con esos equipos.
		Estos otros repositorios tendrán los datos creados por otros usuarios o, incluso, del mismo usuario pero en otro equipo. Cada uno tendrá su propio repositorio local.
		Normalmente, uno de los repositorios remotos, que sera usado como un repositorio central, será un repositorio bare.
		
		Repositorio bare:
			Los repositorios bare son creados solo para compartir versiones entre varios repositorios locales.
			No permiten modificar el código directamente (No tienen Espacio de Trabajo. Hablaremos de esto en breve). 
			Son almacenados en un servidor Git. Estos pueden ser:
				- públicos (en la nube), como GitHub, GitLab (en versión nube), y Bitbucket 
				- privados (auto hospedados), como GitLab, Gitea, y Forgejo.
				
			el usado el las páginas de GitHub, y no permiten un acceso local directo. Solo Permiten actualizar la versión usando 



INICIAR NUEVO REPOSITORIO GIT LOCAL

Para crear un repositorio local, podemos crearlo directamente o hacer una copia de un repositorio remoto.

INICIAR NUEVO REPOSITORIO GIT LOCAL MANUALMENTE

Con git instalado, lo primero es convertir una carpeta, que será el repositorio de nuestro proyecto de software, a un repositorio git.
Para eso podemos crear la carpeta directamente o usar un generador de proyectos con un IDE o las herramientas del programa.

Con esa carpeta creada, entramos y, con la terminal, usamos la herramienta git init
	git init

Nos dará un mensaje informándonos:
	Initialized empty Git repository in E:/source_dev/manuals/git/git_manual/carpeta/.git/

Con esto ya tenemos un repositorio git, con su carpeta .git incluida, y una rama, creada por defecto, con el nombre main (en su momento se llamó master).
Esta carpeta sigue funcionando como una carpeta normal, pero ahora es revisada por el programa git, con lo que podemos usar sus herramientas.

HACER COPIA DE UN REPOSITORIO REMOTO

Lo primero que necesitamos es tener la ruta de un proyecto git, que puede estar en nuestro equipo, una red local o internet.




REPOSITORIO GIT

Concretamente, este repositorio git es lo que llamamos un repositorio local.
Tiene su subcarpeta .git incluida, y una rama, creada por defecto, con el nombre main.

Los repositorios locales nos permiten modificar el proyecto localmente, es decir que los cambios se harán solo en nuestro equipo.

Cada cambio que hagamos deber estar asignado a un usuario, como ya dijimos. Si no creaste el usuario, ve al capítulo Configurar git.

Si queremos enviar nuestro código a otros repositorios (que para nosotros serán remotos) tenemos que incluir ramas remotas 



Una herramienta de git muy útil es git status, que nos informa del estado actual del repositorio




En git, los repositorios pueden ser locales o remotos.
	- El repositorio local es en el cual podemos crear y modificar los archivos 
	- Los repositorios remotos nos permiten tener los datos coordinados, ya sea en caso de varios usuarios, que nos envien una versión o arreglo,
	o el mismo usuario que usa distintos equipos para hacer los cambios.
	
Para crear un repositorio local, podemos crearlo directamente o hacer una copia de un repositorio remoto.


Dentro de esa carpeta abriremos un terminal e introducimos 
git init