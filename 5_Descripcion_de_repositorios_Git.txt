DESCRIPCIÓN DE REPOSITORIOS GIT

En breve empezaremos a crear y manejar cada repositorio, pero antes vamos a hacer una descripción de los tipos de repositorios y donde están y como se organizan los archivos.


TIPOS DE REPOSITORIOS GIT

Existen dos tipos de repositorios:

	- Repositorios locales
		Son las carpetas entramos y modificamos nuestros archivos. Incluyen una carpeta .git que almacena el estado de los archivos, indicando si git los tiene controlados, si hay versiones anteriores,
		Estas carpetas son locales, y cada archivo se gestiona de forma local. Las acciones que realizemos serán solo válidas en nuestro repo.
		Si queremos comunicarnos con otros repos, tendremos que incluir repositorios remotos.

	- Repositorios remotos.
		Los repositorios remotos son rutas a repositorios que están en otro equipo, o directorio, del mismo equipo.
		En este caso, para tener acceso, obviamente debemos tener comunicación con esos equipos.
		Estos otros repositorios tendrán los datos creados por otros usuarios o, incluso, del mismo usuario pero en otro equipo o directorio.
		Normalmente, uno de los repositorios remotos, que sera usado como un repositorio central, será un repositorio bare.
		Los repositorios bare:
			son creados sólo para compartir versiones entre varios repositorios locales.
			No tienen opción para gestionar los archivos de forma interna, solo funcionan con las opciones de git.
			No tienen Working Directory (que veremos en breve)
			Normalmente son almacenados en un servidor Git. Estos pueden ser:
				- públicos (en la nube), como GitHub, GitLab (en versión nube), y Bitbucket 
				- privados (auto hospedados), como GitLab, Gitea, y Forgejo.


VISUALIZACIÓN DE UN REPOSITORIO LOCAL GIT

Cuando accedemos a un repositorio git, lo hacemos igual que una carpeta, y su contenido parece ser similar, pero realmente solo estamos viendo una parte del repostorio.
La forma de saber si realmente es un repositorio git es con las herramientas de git, o viendo que tiene un directorio .git oculto.




ÁREAS DE GIT


WORKING DIRECTORY

Lo que estamos viendo es realmente una de las áreas usadas por el repositorio local de git: el Working Directory.

Esta zona está apuntando a una parte del contenido git del proyecto. Normalmente es un commit (registro de los cambios) que está asociado a una branch (rama).
Expliquemos que quiere decir cada cosa:

	- branch (rama):
		Un proyecto puede tener varias ramas. Cada una es una versión, con un objetivo distinto, del proyecto que estamos creando. 
		Cada versión, incluso si creamos un repo git nuevo, usará una rama mínimo.
		La rama por defecto de git es llamada con el nombre main. En versiones anteriores se usaba master.
		Cada rama mantiene su propio historial de cambios (commits).
		Para ver o cambiar de branch, usas estos comandos:
			git checkout
			git branch
			
	- commit (un registro de los cambios). 
		Un commit (o registro de cambio) almacena los archivos que el usuario le fué indicando.
		Este commit puede estar en una o varias ramas.
		Es similar a hacer una foto de tu proyecto en el estado actual, cada vez que evoluciona.
		Cada commit está asignado a un usuario, con su propio email,, con lo que siempre se sabrá quien hizo cada parte.
		Además cada commit tiene asignado un texto, que describe que se hizo, y un código de identidad, creado por git, de 40 dígitos hexadecimales.
		Para crear un commit
			- git add <archivo> : Con esto indicas los archivos que quieres añadir.
			- git commit  -m "<descripción commit>" : Con esto creas el commit y le asignas una descripción. Este commit se asignará como parte de la rama en la que estés.

	- ESTADO DE ARCHIVOS NO REGISTRADOS
		Esto nos indica los estados de los archivos, tanto nuevos, eliminados o cambiados, que ya no coinciden con el commit previo.
			Commited (confirmado)
			Modified (modificado)
			Staged (preparado)

Por tanto, Working Directory siempre debe estar dirigido a un commit en una rama, y una vez que apunte a una rama, git muestra directamente, en la carpeta, los archivos asignados, usando otra área de git llamada GIT DIRECTORY, una base de datos donde está guardados.

Para que Working Directory guarde a donde apunta, se usa un puntero.
Este puntero es el llamado HEAD (con letras mayúsculas) y apunta a uno de los posibles identificadores de commits, llamados heads (en minúsculas)

El resto de áreas son información que veremos a través de de las herramientas de git.


STAGING AREA

Está área gestiona los archivos que vas a añadir al siguiente commit. justo después de usar git add <archivo>
Almacena lo que irá en el siguiente commit que crees.

Es también conocido como index.


LOCAL REPOSITORY (INSIDE .GIT DIRECTORY)

Almacena los metadatos y la base de datos de objetos git.


REMOTE REPOSITORY



RESUMEN CON LOS TÉRMINOS

Ahora que conocemos los términos importantes de git, aunque no las instrucciones, podemos ver como funciona.

Pongamos que tenemos EXISTE UN REPOSITORIO EN GITHUB con DOS RAMAS, llamada MAIN (que es la usada por defecto) y PACO.

Si queremos ver y cambiar ese código, podemos CLONAR EL REPOSITORIO, creando un repositorio local, basado en el remoto.

Si entramos en ese repositoro local, como con cualquier carpeta, veremos unos datos